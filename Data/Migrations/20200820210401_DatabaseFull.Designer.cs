// <auto-generated />
using System;
using Huertos_Autosustentables_PI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Huertos_Autosustentables_PI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200820210401_DatabaseFull")]
    partial class DatabaseFull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Huertos_Autosustentables_PI.Models.Clima", b =>
                {
                    b.Property<int>("IdClima")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaracteristicasClima")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NombreClima")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("IdClima");

                    b.ToTable("Clima");
                });

            modelBuilder.Entity("Huertos_Autosustentables_PI.Models.Cultivo", b =>
                {
                    b.Property<int>("IdCultivos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CuerpoCultivos")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("FK_IdRegiones")
                        .HasColumnType("int");

                    b.Property<int?>("Fk_IdTipoCultivo")
                        .HasColumnType("int");

                    b.Property<int>("IdRegione")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoCultivo")
                        .HasColumnType("int");

                    b.Property<string>("IntroduccionCultivos")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("NombreCultivos")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecomendacionesCultivos")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("IdCultivos");

                    b.HasIndex("FK_IdRegiones");

                    b.HasIndex("Fk_IdTipoCultivo");

                    b.ToTable("Cultivo");
                });

            modelBuilder.Entity("Huertos_Autosustentables_PI.Models.DetalleUsersCultivo", b =>
                {
                    b.Property<int>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FK_IdCultivos")
                        .HasColumnType("int");

                    b.Property<int>("IdCultivo")
                        .HasColumnType("int");

                    b.Property<string>("LugarCultivoDetalle")
                        .HasColumnType("nvarchar(150)");

                    b.Property<float>("MetrosCuadradosDetalle")
                        .HasColumnType("real");

                    b.Property<float>("PrecioSemillasDetalle")
                        .HasColumnType("real");

                    b.HasKey("IdDetalle");

                    b.HasIndex("FK_IdCultivos");

                    b.ToTable("DetalleUsersCultivo");
                });

            modelBuilder.Entity("Huertos_Autosustentables_PI.Models.Region", b =>
                {
                    b.Property<int>("IdRegiones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaracterisitcasRegiones")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("FK_IdClima")
                        .HasColumnType("int");

                    b.Property<int>("IdClima")
                        .HasColumnType("int");

                    b.Property<string>("NombreRegiones")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdRegiones");

                    b.HasIndex("FK_IdClima");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Huertos_Autosustentables_PI.Models.TipoCultivo", b =>
                {
                    b.Property<int>("IdTipoCultivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaracteristicasTipoCultivos")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NombreTipoCultivos")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdTipoCultivo");

                    b.ToTable("TipoCultivo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Huertos_Autosustentables_PI.Models.Cultivo", b =>
                {
                    b.HasOne("Huertos_Autosustentables_PI.Models.Region", "FK_")
                        .WithMany("Cultivos")
                        .HasForeignKey("FK_IdRegiones");

                    b.HasOne("Huertos_Autosustentables_PI.Models.TipoCultivo", "Fk_")
                        .WithMany("Cultivos")
                        .HasForeignKey("Fk_IdTipoCultivo");
                });

            modelBuilder.Entity("Huertos_Autosustentables_PI.Models.DetalleUsersCultivo", b =>
                {
                    b.HasOne("Huertos_Autosustentables_PI.Models.Cultivo", "FK_")
                        .WithMany("Detalles")
                        .HasForeignKey("FK_IdCultivos");
                });

            modelBuilder.Entity("Huertos_Autosustentables_PI.Models.Region", b =>
                {
                    b.HasOne("Huertos_Autosustentables_PI.Models.Clima", "FK_")
                        .WithMany("Regiones")
                        .HasForeignKey("FK_IdClima");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
